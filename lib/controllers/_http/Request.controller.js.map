{"version":3,"sources":["../../../src/controllers/_http/Request.controller.js"],"names":["syncRequest","require","BaseCtrl","Response","Icons","module","exports","request","method","uri","qs","json","headers","config","Object","assign","response","url","data","getBody","err","error","console","log","Error","query","send","body"],"mappings":";;;;;;;;;;AAAA;;AAEA,IAAMA,cAAcC,QAAQ,cAAR,CAApB;AACA,IAAMC,WAAWD,QAAQ,6CAAR,CAAjB;AACA,IAAME,WAAWF,QAAQ,mCAAR,CAAjB;;eACkBA,QAAQ,kCAAR,C;IAAVG,K,YAAAA,K;;AAERC,OAAOC,OAAP;AAAA;;AACE,uBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAEnB,UAAKA,OAAL,GAAeA,OAAf;AAFmB;AAGpB;;AAJH;AAAA;AAAA,+BAMkC;AAAA,UAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,UAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,UAAZC,EAAY,QAAZA,EAAY;AAAA,UAARC,IAAQ,QAARA,IAAQ;AAAA,UACtBC,OADsB,GACV,IADU,CACtBA,OADsB;;AAE9B,UAAMC,SAASC,OAAOC,MAAP,CAAc,EAAEH,gBAAF,EAAWF,MAAX,EAAeC,UAAf,EAAd,EAAqC,KAAKE,MAA1C,CAAf;;AAEA,UAAIG,WAAW,EAAf;;AAEA,UAAI;AACFA,mBAAWhB,YAAYQ,MAAZ,EAAoB,KAAKS,GAAL,GAAWR,GAA/B,EAAoCI,MAApC,CAAX;AACAG,iBAASE,IAAT,GAAgBF,SAASG,OAAT,CAAiB,MAAjB,CAAhB;AACD,OAHD,CAIA,OAAOC,GAAP,EAAY;AACVJ,iBAASK,KAAT,GAAiBD,GAAjB;AACAE,gBAAQC,GAAR,CAAenB,MAAMoB,KAArB,SAA8BJ,GAA9B;AACD;;AAEDJ,eAASR,MAAT,GAAkBA,MAAlB;AACA,aAAO,IAAIL,QAAJ,CAAaa,QAAb,CAAP;AACD;AAvBH;AAAA;AAAA,wBAyBMP,GAzBN,EAyBWgB,KAzBX,EAyBkB;AACd,aAAO,KAAKC,IAAL,CAAU,EAAElB,QAAQ,KAAV,EAAiBC,QAAjB,EAAsBC,IAAIe,KAA1B,EAAV,CAAP;AACD;AA3BH;AAAA;AAAA,yBA6BOhB,GA7BP,EA6BYkB,IA7BZ,EA6BkB;AACd,aAAO,KAAKD,IAAL,CAAU,EAAElB,QAAQ,MAAV,EAAkBC,QAAlB,EAAuBE,MAAMgB,IAA7B,EAAV,CAAP;AACD;AA/BH;AAAA;AAAA,0BAiCQlB,GAjCR,EAiCakB,IAjCb,EAiCmB;AACf,aAAO,KAAKD,IAAL,CAAU,EAAElB,QAAQ,OAAV,EAAmBC,QAAnB,EAAwBE,MAAMgB,IAA9B,EAAV,CAAP;AACD;AAnCH;AAAA;AAAA,wBAqCMlB,GArCN,EAqCWkB,IArCX,EAqCiB;AACb,aAAO,KAAKD,IAAL,CAAU,EAAElB,QAAQ,KAAV,EAAiBC,QAAjB,EAAsBE,MAAMgB,IAA5B,EAAV,CAAP;AACD;AAvCH;AAAA;AAAA,4BAyCSlB,GAzCT,EAyCckB,IAzCd,EAyCoB;AAChB,aAAO,KAAKD,IAAL,CAAU,EAAElB,QAAQ,QAAV,EAAoBC,QAApB,EAAyBE,MAAMgB,IAA/B,EAAV,CAAP;AACD;AA3CH;;AAAA;AAAA,EAA2CzB,QAA3C","file":"Request.controller.js","sourcesContent":["// ActivityGroup.controller.js\n\nconst syncRequest = require('sync-request');\nconst BaseCtrl = require('../../controllers/_base/BaseCtrl.controller');\nconst Response = require('../../models/_http/Response.model');\nconst { Icons } = require('../../constants/Global.constants');\n\nmodule.exports = class RequestCtrl extends BaseCtrl {\n  constructor(request) {\n    super();\n    this.request = request;\n  }\n\n  send({ method, uri, qs, json }) {\n    const { headers } = this;\n    const config = Object.assign({ headers, qs, json }, this.config);\n\n    let response = {};\n\n    try {\n      response = syncRequest(method, this.url + uri, config);\n      response.data = response.getBody('utf8');\n    }\n    catch (err) {\n      response.error = err;\n      console.log(`${Icons.Error} ${err}`);\n    }\n\n    response.method = method;\n    return new Response(response);\n  }\n\n  get(uri, query) {\n    return this.send({ method: 'GET', uri, qs: query });\n  }\n\n  post(uri, body) {\n    return this.send({ method: 'POST', uri, json: body });\n  }\n\n  patch(uri, body) {\n    return this.send({ method: 'PATCH', uri, json: body });\n  }\n\n  put(uri, body) {\n    return this.send({ method: 'PUT', uri, json: body });\n  }\n\n  delete(uri, body) {\n    return this.send({ method: 'DELETE', uri, json: body });\n  }\n};\n"]}