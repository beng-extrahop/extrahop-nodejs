{"version":3,"sources":["../../src/controllers/Metric.controller.js"],"names":["Database","require","BaseCtrl","MetricSet","MetricSearch","Utils","Config","Icons","module","exports","search","postMetrics","postMetricsTotal","postMetricsTotalByObject","params","searchInit","db","filename","DB_DIR","id","autoload","printSearchInfo","metrics","count","pageAt","numPages","getPageCount","total","limit","length","insert","console","info","searchNext","Success","Warn","Object","assign","searchId","generateId","getMetrics","get","stats","getNext","data","process","appliance","getNextMetrics","xid","Math","floor","clock","metric_category","Date","from","until","find","exec","err","results","error","Error","warn","writeToCSV"],"mappings":"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","file":"Metric.controller.js","sourcesContent":["// Metric.controller.js\n\nconst Database = require('nedb');\nconst BaseCtrl = require('../controllers/_base/BaseCtrl.controller');\nconst MetricSet = require('../models/metric/MetricSet.model');\nconst MetricSearch = require('../models/metric/MetricSearch.model');\nconst Utils = require('../utils/BaseUtil.util.js');\nconst { Config, Icons } = require('../constants/Global.constants');\n\nmodule.exports = class MetricCtrl extends BaseCtrl {\n\n  // -------------------------------------\n  // Defaults\n  // -------------------------------------\n\n  get(search) {\n    return new MetricSet(...this.postMetrics(search));\n  }\n\n  getNext(search) {\n    return new MetricSet(...this.postMetrics(search));\n  }\n\n  total(search) {\n    return this.postMetricsTotal(search);\n  }\n\n  totalByObject(search) {\n    return this.postMetricsTotalByObject(search);\n  }\n\n  // -------------------------------------\n  // Search Functions\n  // -------------------------------------\n\n  search(params = {}) {\n    const search = this.searchInit(new MetricSearch(params));\n    const db = new Database({\n      filename: `${Config.DB_DIR}/metrics-${search.id}.db`,\n      autoload: true\n    });\n\n    this.printSearchInfo(search);\n\n    let { metrics } = search;\n    let count = 0;\n    let pageAt = 0;\n    const numPages = this.getPageCount(search.total, search.limit);\n\n    while (metrics && metrics.length > 0) {\n\n      // metrics = metrics.map(metric => this.parse(metric, '_source'));\n      db.insert(metrics);\n\n      console.info(`[${++pageAt}/${numPages}] Processed ${(count += metrics.length)} results, awaiting next page...`);\n      metrics = this.searchNext(search);\n    }\n\n    if (count === search.total) {\n      console.info(`\\n${Icons.Success} Committed ${count}/${search.total} results to DB: metrics-${search.id}.db`);\n    }\n    else {\n      console.info(`\\n${Icons.Warn} Committed ${count}/${search.total} metrics to DB: metrics-${search.id}.db`);\n    }\n\n    return Object.assign(search, { db, metrics });\n  }\n\n  searchInit(search) {\n    const searchId = Utils.generateId();\n    const getMetrics = this.get(search);\n\n    return Object.assign(search, getMetrics, { id: searchId, total: getMetrics.stats.length });\n  }\n\n  searchNext(search) {\n    const getMetrics = this.getNext(search);\n\n    return getMetrics.data ? getMetrics.data.stats : [];\n  }\n\n  // -------------------------------------\n  // API Functions\n  // -------------------------------------\n\n  postMetrics(search) {\n    return this.process(this.appliance.postMetrics(search), 'metrics');\n  }\n\n  getMetricsNext(search) {\n    return this.process(this.appliance.getNextMetrics(search.xid), 'metrics');\n  }\n\n  postMetricsTotal(search) {\n    return this.process(this.appliance.postMetricsTotal(search), 'metrics');\n  }\n\n  postMetricsTotalByObject(search) {\n    return this.process(this.appliance.postMetricsTotalByObject(search), 'metrics');\n  }\n\n  // -------------------------------------\n  // Utility Functions\n  // -------------------------------------\n\n  getPageCount(total = 1, limit = 1) {\n    return total % limit === 0 ? total / limit : Math.floor(total / limit) + 1;\n  }\n\n  printSearchInfo(search = {}) {\n    console.info('-------------------------- METRIC SEARCH INFO --------------------------------');\n    console.info(`- Search ID (local): ${search.id}`);\n    console.info(`- Search timestamp: ${search.clock}`);\n    console.info(`- Search types: ${search.metric_category || 'any'}`);\n    console.info(`- Search results: ${search.total}`);\n    console.info(`- Search from: ${new Date(search.from)}`);\n    console.info(`- Search until: ${new Date(search.until)}`);\n    console.info('-------------------------------------------------------------------------------\\n');\n  }\n\n  saveToCSV(search = {}) {\n    search.db.find({}).exec((err, results) => {\n      if (err) {\n        console.error(`${Icons.Error} ${err}`);\n      }\n      else if (results.length === 0) {\n        console.warn(`${Icons.Warn} No results found in database.`);\n      }\n      else {\n        new MetricSet(results).writeToCSV({ filename: `metrics-${search.id}.csv` });\n        console.info(`${Icons.Success} Saved ${results.length} metrics to CSV: metrics-${search.id}.csv`);\n      }\n    });\n  }\n};\n"]}