{"version":3,"sources":["../../src/controllers/Record.controller.js"],"names":["Database","require","BaseCtrl","RecordSet","RecordSearch","Config","Icons","Utils","module","exports","cursor","contextTtl","appliance","getRecordsCursor","searchFilter","postRecordsSearch","search","Object","assign","data","id","generateId","postRecordsCursor","records","storeSearch","db","find","exec","err","results","console","error","Error","length","warn","Warn","log","slice","writeToCSV","info","Success","searchInit","parseSearchFilter","filename","DB_DIR","autoload","printSearchInfo","numPages","getPageCount","pageAt","count","map","parse","record","insert","searchNext","context_ttl","total","filter","rules","forEach","includes","rule","field","deviceName","value","operand","startsWith","devices","getByName","replace","discovery_id","type","JSON","stringify","parseId","types","limit","Date","from","until","Math","floor"],"mappings":"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","file":"Record.controller.js","sourcesContent":["// Record.controller.js\n\nconst Database = require('nedb');\nconst BaseCtrl = require('../controllers/_base/BaseCtrl.controller');\nconst RecordSet = require('../models/record/RecordSet.model');\nconst RecordSearch = require('../models/record/RecordSearch.model');\nconst { Config, Icons } = require('../constants/Global.constants');\nconst Utils = require('../utils/BaseUtil.util.js');\n\nmodule.exports = class RecordCtrl extends BaseCtrl {\n\n  // -------------------------------------\n  // Defaults\n  // -------------------------------------\n\n  get(cursor, contextTtl) {\n    return this.appliance.getRecordsCursor(cursor, contextTtl);\n  }\n\n  search(searchFilter) {\n    return this.appliance.postRecordsSearch(searchFilter);\n  }\n\n  searchInit(search = {}) {\n    return Object.assign(search, this.postRecordsSearch(search).data, { id: Utils.generateId() });\n  }\n\n  searchNext(cursor, contextTtl) {\n    return (this.postRecordsCursor(cursor, contextTtl).data || { records: [] }).records;\n  }\n\n  store(searchFilter) {\n    return this.storeSearch(searchFilter);\n  }\n\n  // -------------------------------------\n  // Save Functions\n  // -------------------------------------\n\n  saveToCSV(search = {}) {\n    search.db.find({}).exec((err, results) => {\n      if (err) {\n        console.error(`${Icons.Error} ${err}`);\n      }\n      else if (results.length === 0) {\n        console.warn(`${Icons.Warn} No results found in database.`);\n      }\n      else {\n        const records = new RecordSet(...results);\n        console.log(records.slice(0,1));\n        records.writeToCSV(`records-${search.id}.csv`);\n        console.info(`${Icons.Success} Saved ${results.length} records to CSV: records-${search.id}.csv`);\n      }\n    });\n  }\n\n  // -------------------------------------\n  // Search Functions\n  // -------------------------------------\n\n  storeSearch(searchFilter = {}) {\n    const search = this.searchInit(new RecordSearch(this.parseSearchFilter(searchFilter)));\n    const db = new Database({ filename: `${Config.DB_DIR}/records-${search.id}.db`, autoload: true });\n\n    this.printSearchInfo(search);\n\n    const numPages = this.getPageCount(search);\n    let records = search.records, pageAt = 0, count = 0;\n\n    while (records && records.length > 0) {\n      records = records.map(record => this.parse(record, '_source'));\n      db.insert(records);\n\n      console.info(`[${++pageAt}/${numPages}] Processed ${(count += records.length)} results, awaiting next page...`);\n      records = this.searchNext(search.cursor, search.context_ttl);\n    }\n\n    if (count === search.total) {\n      console.info(`\\n${Icons.Success} Committed ${count}/${search.total} results to DB: records-${search.id}.db`);\n    }\n    else {\n      console.info(`\\n${Icons.Warn} Committed ${count}/${search.total} records to DB: records-${search.id}.db`);\n    }\n\n    return Object.assign(search, { db, records });\n  }\n\n  // -------------------------------------\n  // Utility Functions\n  // -------------------------------------\n\n  parseSearchFilter(searchFilter = {}) {\n    if ( !searchFilter.filter.rules ) {\n      return searchFilter;\n    }\n\n    searchFilter.filter.rules.forEach(rule => {\n      if (!['server', 'client', 'device'].includes(rule.field)) {\n        return;\n      }\n\n      const deviceName = rule.value || rule.operand;\n\n      if (deviceName.startsWith('*')) {\n        const devices = this.appliance.devices().getByName(deviceName.replace('*', ''));\n\n        if ( devices.length > 0 ) {\n          console.log('Substituting discovery id for name:', rule.value, '=>', devices[0].discovery_id);\n          rule.operand = { type: 'device', value: devices[0].discovery_id };\n          delete rule.value;\n        }\n      }\n    });\n\n    console.log(JSON.stringify(searchFilter, null, 2));\n    return searchFilter;\n  }\n\n  printSearchInfo(search = {}) {\n    console.info('------------------------------ SEARCH INFO ------------------------------------');\n    console.info(`- Search ID (local): ${search.id}`);\n    console.info(`- Search timestamp: ${Utils.parseId(search.id)}`);\n    console.info(`- Search types: ${search.types || 'any'}`);\n    console.info(`- Search limit: ${search.limit}`);\n    console.info(`- Search results: ${search.total}`);\n    console.info(`- Search from: ${new Date(search.from)}`);\n    console.info(`- Search until: ${new Date(search.until)}`);\n    console.info('-------------------------------------------------------------------------------\\n');\n  }\n\n  getPageCount(search) {\n    const { total = 0, limit = 0 } = search;\n    return total % limit === 0 ? total / limit : Math.floor(total / limit) + 1;\n  }\n\n  // -------------------------------------\n  // API Functions\n  // -------------------------------------\n\n  getRecordsCursor(cursor, contextTtl) {\n    return this.appliance.getRecordsCursor(cursor, contextTtl);\n  }\n\n  postRecordsCursor(cursor, contextTtl) {\n    return this.appliance.postRecordsCursor({ cursor }, contextTtl);\n  }\n\n  postRecordsSearch(search) {\n    return this.appliance.postRecordsSearch(search);\n  }\n};\n"]}