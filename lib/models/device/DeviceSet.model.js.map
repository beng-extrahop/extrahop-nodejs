{"version":3,"sources":["../../../src/models/device/DeviceSet.model.js"],"names":["BaseObjectSet","require","Device","module","exports","devices","map","device","filter","Object","keys","every","key","some","filename","generateId","subkey"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,gBAAgBC,QAAQ,wCAAR,CAAtB;AACA,IAAMC,SAASD,QAAQ,kCAAR,CAAf;;AAEAE,OAAOC,OAAP;AAAA;;AACE,uBAAwB;AAAA;;AAAA;;AAAA,sCAATC,OAAS;AAATA,aAAS;AAAA;;AAAA,+JACbA,QAAQC,GAAR,CAAY;AAAA,aAAU,IAAIJ,MAAJ,CAAWK,MAAX,CAAV;AAAA,KAAZ,CADa;AAEvB;;AAHH;AAAA;AAAA,4BAKoB;AAAA,UAAbC,MAAa,uEAAJ,EAAI;;AAChB,aAAO,KAAKA,MAAL,CAAY;AAAA,eAAUC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBG,KAApB,CAA0B;AAAA,iBAAOJ,OAAOK,GAAP,KAAeJ,OAAOI,GAAP,CAAtB;AAAA,SAA1B,CAAV;AAAA,OAAZ,CAAP;AACD;AAPH;AAAA;AAAA,8BASuB;AAAA,UAAbJ,MAAa,uEAAJ,EAAI;;AACnB,aAAO,KAAKA,MAAL,CAAY;AAAA,eAAUC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBG,KAApB,CAA0B;AAAA,iBAAOJ,OAAOK,GAAP,KAAeJ,OAAOI,GAAP,CAAtB;AAAA,SAA1B,CAAV;AAAA,OAAZ,CAAP;AACD;AAXH;AAAA;AAAA,8BAauB;AAAA,UAAbJ,MAAa,uEAAJ,EAAI;;AACnB,aAAO,KAAKA,MAAL,CAAY;AAAA,eAAUC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBK,IAApB,CAAyB;AAAA,iBAAON,OAAOK,GAAP,KAAeJ,OAAOI,GAAP,CAAtB;AAAA,SAAzB,CAAV;AAAA,OAAZ,CAAP;AACD;AAfH;AAAA;AAAA,iCAiB0B;AAAA,UAAbJ,MAAa,uEAAJ,EAAI;;AACtB,aAAO,KAAKA,MAAL,CAAY;AAAA,eAAUC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBK,IAApB,CAAyB;AAAA,iBAAON,OAAOK,GAAP,KAAeJ,OAAOI,GAAP,CAAtB;AAAA,SAAzB,CAAV;AAAA,OAAZ,CAAP;AACD;AAnBH;AAAA;AAAA,sCAqBwE;AAAA,iCAAzDE,QAAyD;AAAA,UAAzDA,QAAyD,+CAAnC,KAAKC,UAAL,EAAmC;AAAA,UAAVC,MAAU,SAAVA,MAAU;;AACpE,uHAAiB,EAAEF,kBAAF,EAAYE,cAAZ,EAAjB;AACD;AAvBH;;AAAA;AAAA,EAAyChB,aAAzC","file":"DeviceSet.model.js","sourcesContent":["// DeviceSet.model.js\n\nconst BaseObjectSet = require('../../models/_base/BaseObjectSet.model');\nconst Device = require('../../models/device/Device.model');\n\nmodule.exports = class DeviceSet extends BaseObjectSet {\n  constructor(...devices) {\n    super(...devices.map(device => new Device(device)));\n  }\n\n  with(filter = {}) {\n    return this.filter(device => Object.keys(filter).every(key => device[key] == filter[key]));\n  }\n\n  without(filter = {}) {\n    return this.filter(device => Object.keys(filter).every(key => device[key] != filter[key]));\n  }\n\n  withAny(filter = {}) {\n    return this.filter(device => Object.keys(filter).some(key => device[key] == filter[key]));\n  }\n\n  withoutAny(filter = {}) {\n    return this.filter(device => Object.keys(filter).some(key => device[key] != filter[key]));\n  }\n\n  writeToCSV({ filename = `devices-${this.generateId()}.csv`, subkey }) {\n    super.writeToCSV({ filename, subkey });\n  }\n};\n"]}