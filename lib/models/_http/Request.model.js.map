{"version":3,"sources":["../../../src/models/_http/Request.model.js"],"names":["BaseObject","require","Response","Icons","syncRequest","module","exports","hostname","apikey","params","url","headers","Authorization","config","cache","gzip","timeout","retry","retryDelay","maxRetries","method","uri","qs","json","Object","assign","response","data","getBody","err","error","console","log","Error","query","send","body"],"mappings":";;;;;;;;;;AAAA;;AAEA,IAAMA,aAAaC,QAAQ,qCAAR,CAAnB;AACA,IAAMC,WAAWD,QAAQ,mCAAR,CAAjB;;eACkBA,QAAQ,kCAAR,C;IAAVE,K,YAAAA,K;;AAER,IAAMC,cAAcH,QAAQ,cAAR,CAApB;;AAEAI,OAAOC,OAAP;AAAA;;AACE,mBAAYC,QAAZ,EAAsBC,MAAtB,EAA2C;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAAA;;AAEzC,UAAKF,QAAL,GAAgBA,QAAhB;AACA,UAAKG,GAAL,GAAWD,OAAOC,GAAP,iBAAyBH,QAAzB,YAAX;AACA,UAAKI,OAAL,GAAe,EAAEC,oCAAkCJ,MAApC,EAAf;;AAEA,UAAKK,MAAL,GAAc;AACZC,aAAOL,OAAOK,KAAP,IAAgB,MADX;AAEZC,YAAMN,OAAOM,IAAP,IAAe,IAFT;AAGZC,eAASP,OAAOO,OAAP,IAAkB,IAHf;AAIZC,aAAOR,OAAOQ,KAAP,IAAgB,IAJX;AAKZC,kBAAYT,OAAOS,UAAP,IAAqB,IALrB;AAMZC,kBAAYV,OAAOU,UAAP,IAAqB;AANrB,KAAd;AANyC;AAc1C;;AAfH;AAAA;AAAA,+BAiBkC;AAAA,UAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,UAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,UAAZC,EAAY,QAAZA,EAAY;AAAA,UAARC,IAAQ,QAARA,IAAQ;;AAC9B,UAAMZ,UAAU,KAAKA,OAArB;AACA,UAAME,SAASW,OAAOC,MAAP,CAAc,EAAEd,gBAAF,EAAWW,MAAX,EAAeC,UAAf,EAAd,EAAqC,KAAKV,MAA1C,CAAf;;AAEA,UAAIa,WAAW,EAAf;;AAEA,UAAI;AACFA,mBAAWtB,YAAYgB,MAAZ,EAAoB,KAAKV,GAAL,GAAWW,GAA/B,EAAoCR,MAApC,CAAX;AACAa,iBAASC,IAAT,GAAgBD,SAASE,OAAT,CAAiB,MAAjB,CAAhB;AACD,OAHD,CAIA,OAAOC,GAAP,EAAY;AACVH,iBAASI,KAAT,GAAiBD,GAAjB;AACAE,gBAAQC,GAAR,CAAe7B,MAAM8B,KAArB,SAA8BJ,GAA9B;AACD;;AAEDH,eAASN,MAAT,GAAkBA,MAAlB;;AAEA,aAAO,IAAIlB,QAAJ,CAAawB,QAAb,CAAP;AACD;AAnCH;AAAA;AAAA,wBAqCML,GArCN,EAqCWa,KArCX,EAqCkB;AACd,aAAO,KAAKC,IAAL,CAAU,EAAEf,QAAQ,KAAV,EAAiBC,QAAjB,EAAsBC,IAAIY,KAA1B,EAAV,CAAP;AACD;AAvCH;AAAA;AAAA,yBAyCOb,GAzCP,EAyCYe,IAzCZ,EAyCkB;AACd,aAAO,KAAKD,IAAL,CAAU,EAAEf,QAAQ,MAAV,EAAkBC,QAAlB,EAAuBE,MAAMa,IAA7B,EAAV,CAAP;AACD;AA3CH;AAAA;AAAA,0BA6CQf,GA7CR,EA6Cae,IA7Cb,EA6CmB;AACf,aAAO,KAAKD,IAAL,CAAU,EAAEf,QAAQ,OAAV,EAAmBC,QAAnB,EAAwBE,MAAMa,IAA9B,EAAV,CAAP;AACD;AA/CH;AAAA;AAAA,wBAiDMf,GAjDN,EAiDWe,IAjDX,EAiDiB;AACb,aAAO,KAAKD,IAAL,CAAU,EAAEf,QAAQ,KAAV,EAAiBC,QAAjB,EAAsBE,MAAMa,IAA5B,EAAV,CAAP;AACD;AAnDH;AAAA;AAAA,4BAqDSf,GArDT,EAqDce,IArDd,EAqDoB;AAChB,aAAO,KAAKD,IAAL,CAAU,EAAEf,QAAQ,QAAV,EAAoBC,QAApB,EAAyBE,MAAMa,IAA/B,EAAV,CAAP;AACD;AAvDH;;AAAA;AAAA,EAAuCpC,UAAvC","file":"Request.model.js","sourcesContent":["// Request.model.js\n\nconst BaseObject = require('../../models/_base/BaseObject.model');\nconst Response = require('../../models/_http/Response.model');\nconst { Icons } = require('../../constants/Global.constants');\n\nconst syncRequest = require('sync-request');\n\nmodule.exports = class Request extends BaseObject {\n  constructor(hostname, apikey, params = {}) {\n    super();\n    this.hostname = hostname;\n    this.url = params.url || `https://${hostname}/api/v1`;\n    this.headers = { Authorization: `ExtraHop apikey=${apikey}` };\n\n    this.config = {\n      cache: params.cache || 'file',\n      gzip: params.gzip || true,\n      timeout: params.timeout || 5000,\n      retry: params.retry || true,\n      retryDelay: params.retryDelay || 1000,\n      maxRetries: params.maxRetries || 3\n    };\n  }\n\n  send({ method, uri, qs, json }) {\n    const headers = this.headers;\n    const config = Object.assign({ headers, qs, json }, this.config);\n\n    let response = {};\n\n    try {\n      response = syncRequest(method, this.url + uri, config);\n      response.data = response.getBody('utf8');\n    }\n    catch (err) {\n      response.error = err;\n      console.log(`${Icons.Error} ${err}`);\n    }\n\n    response.method = method;\n\n    return new Response(response);\n  }\n\n  get(uri, query) {\n    return this.send({ method: 'GET', uri, qs: query });\n  }\n\n  post(uri, body) {\n    return this.send({ method: 'POST', uri, json: body });\n  }\n\n  patch(uri, body) {\n    return this.send({ method: 'PATCH', uri, json: body });\n  }\n\n  put(uri, body) {\n    return this.send({ method: 'PUT', uri, json: body });\n  }\n\n  delete(uri, body) {\n    return this.send({ method: 'DELETE', uri, json: body });\n  }\n};\n"]}